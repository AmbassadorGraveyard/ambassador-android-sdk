apply plugin: 'com.android.library'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.google.gms.google-services'

repositories {
    jcenter()
    mavenCentral()
    maven { url 'http://clojars.org/repo' }
    flatDir {
        dirs 'libs'
    }
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.0.2'
        classpath 'com.google.gms:google-services:1.5.0-beta2'
    }
}

dependencies {
    //classpath 'com.android.tools.build:gradle:1.1.0'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.google.android.gms:play-services-analytics:8.3.0'
    compile 'com.google.guava:guava:19.0-rc1'
    compile 'com.pusher:pusher-java-client:0.3.3'
    compile 'org.slf4j:slf4j-android:1.7.12'
    compile(name: 'augur', ext: 'aar')
    compile 'com.google.dagger:dagger:2.0'
    compile 'org.mockito:mockito-core:1.10.19'
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    compile 'com.facebook.android:facebook-android-sdk:4.7.0'
    compile('com.twitter.sdk.android:twitter-core:1.6.1@aar') {
        transitive = true;
    }
    compile 'com.android.support:recyclerview-v7:23.0.0'
    apt "com.google.dagger:dagger-compiler:2.0"
    provided 'org.glassfish:javax.annotation:10.0-b28'

    //Unit testing dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-module-test-mockito-junit4:1.6.2'
    testCompile 'org.powermock:powermock-module-junit4:1.6.2'

    //Automated UI testing dependencies
    androidTestCompile 'com.facebook.android:facebook-android-sdk:4.5.0'
    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2'
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2') {
        // Necessary to avoid version conflicts
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestApt "com.google.dagger:dagger-compiler:2.0"
    //androidTestCompile 'com.android.support.test.espresso:espresso-web:2.2'
}

Properties props = new Properties()
try {
    props.load(file('./fabric.properties').newDataInputStream())
} catch (Exception ex) {
    throw new GradleException("Missing fabric.properties, check the fabric.properties file.");
}


android {
/*
    productFlavors {
        // Define separate dev and prod product flavors.
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21
        }
        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion 16
        }
    }
*/

    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    publishNonDefault true

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        multiDexEnabled true
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
            buildConfigField "String", "***REMOVED***", "\"${props.getProperty("twitterConsumerKey")}\""
            buildConfigField "String", "***REMOVED***", "\"${props.getProperty("twitterConsumerSecret")}\""
        }
        debug {
            buildConfigField "String", "***REMOVED***", "\"${props.getProperty("twitterConsumerKey")}\""
            buildConfigField "String", "***REMOVED***", "\"${props.getProperty("twitterConsumerSecret")}\""
        }
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
    }
}

apply plugin: 'spoon'

spoon {
    // for debug output
    debug = true
}

