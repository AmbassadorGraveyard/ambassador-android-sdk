// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply plugin: 'jacoco'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.7'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
    configurations.all {
        //resolutionStrategy.force 'com.android.support:support-annotations:22.1.0'
        resolutionStrategy {
            force 'org.hamcrest:hamcrest-core:1.3'
            force 'com.android.support:support-annotations:22.1.0'
        }
    }
}

def ignoredByJacoco = [
    'app'
]

subprojects { prj ->
    if (!ignoredByJacoco.contains(prj.name)) {

        apply plugin: 'jacoco'

        jacoco {
            version '0.7.5.201505241946'
        }

        task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
            group = 'Reporting'
            description = 'Generate Jacoco coverage reports after running tests.'

            reports {
                xml.enabled = true
                html.enabled = true
            }

            classDirectories = fileTree(
                    dir: 'build/intermediates/classes/debug',
                    excludes: [
                            '**/R*.class',
                            '**/BuildConfig*',
                            '**/AmbassadorSDK_MembersInjector.class'
                    ]
            )

            sourceDirectories = files('src/main/java')
            executionData = files('build/jacoco/testDebugUnitTest.exec')

            doFirst {
                files('build/intermediates/classes/debug').getFiles().each { file ->
                    if (file.name.contains('$$')) {
                        file.renameTo(file.path.replace('$$', '$'))
                    }
                }
            }
        }
    }
}

jacoco {
    toolVersion '0.7.2.201409121644'
}

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    def projects = new ArrayList()
    subprojects.each { prj ->
        if (!ignoredByJacoco.contains(prj.name)) {
            projects.add(prj)
        }
    }

    dependsOn(projects.jacocoReport)

    additionalSourceDirs = generateSourceFiles(projects)
    sourceDirectories = generateSourceFiles(projects)
    classDirectories = generateClassDirs(projects)
    executionData = files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination 'build/reports/jacoco/full'
        }
        xml {
            enabled true
            destination 'build/reports/jacoco/full/jacocoFullReport.xml'
        }
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

FileCollection generateSourceFiles(Collection projects) {
    def dirs = []

    projects.each { prj ->
        dirs.add("${prj.name}/src/main/java")
    }

    return files(dirs)
}

FileCollection generateClassDirs(Collection projects) {
    def tree = fileTree('directory does not exists')

    projects.each { prj ->
        tree += fileTree(
                dir: "${prj.name}/build/intermediates/classes/debug",
                excludes: [
                        '**/R*.class',
                        '**/BuildConfig*'
                ]
        )
    }

    return tree
}
